[{"C:\\Users\\User\\Desktop\\Chat App\\client\\src\\index.js":"1","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\App.js":"2","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\SocketClient.js":"3","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\MainPage\\Main.js":"4","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\MainPage\\Google.js":"5","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\MainPage\\Bubble.js":"6","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\Cookie\\Cookie.js":"7","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\ChatPage\\Chat.js":"8","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\Friends\\FriendList.js":"9","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\ChatWindow\\ChatWindow.js":"10","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\ChatWindow\\Message.js":"11","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\Friends\\User.js":"12","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\ChatWindow\\Header.js":"13","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\ChatWindow\\Content.js":"14","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\context\\UserContext.js":"15","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\Friends\\Dummy.js":"16","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\Friends\\Modal.js":"17"},{"size":199,"mtime":1608734033415,"results":"18","hashOfConfig":"19"},{"size":468,"mtime":1611314757686,"results":"20","hashOfConfig":"19"},{"size":2104,"mtime":1609550767927,"results":"21","hashOfConfig":"19"},{"size":8257,"mtime":1611227720862,"results":"22","hashOfConfig":"19"},{"size":1443,"mtime":1611227730638,"results":"23","hashOfConfig":"19"},{"size":267,"mtime":1610090389833,"results":"24","hashOfConfig":"19"},{"size":992,"mtime":1610627577893,"results":"25","hashOfConfig":"19"},{"size":3092,"mtime":1611751490592,"results":"26","hashOfConfig":"19"},{"size":2467,"mtime":1611749584940,"results":"27","hashOfConfig":"19"},{"size":341,"mtime":1611058336958,"results":"28","hashOfConfig":"19"},{"size":360,"mtime":1610971369594,"results":"29","hashOfConfig":"19"},{"size":1087,"mtime":1611750072200,"results":"30","hashOfConfig":"19"},{"size":309,"mtime":1611750179253,"results":"31","hashOfConfig":"19"},{"size":175,"mtime":1610971155550,"results":"32","hashOfConfig":"19"},{"size":87,"mtime":1610972806830,"results":"33","hashOfConfig":"19"},{"size":757,"mtime":1611060578851,"results":"34","hashOfConfig":"19"},{"size":3445,"mtime":1611666065548,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"c5dfyy",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},"C:\\Users\\User\\Desktop\\Chat App\\client\\src\\index.js",[],["77","78"],"C:\\Users\\User\\Desktop\\Chat App\\client\\src\\App.js",[],"C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\SocketClient.js",["79","80","81"],"import { React, useEffect, useRef, useState } from 'react'\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios'\r\n\r\nexport default function SocketClient() {\r\n    const chatValue = useRef();\r\n    const sendChatBtn = useRef();\r\n    const ENDPOINT = 'http://localhost:5000'\r\n    let socket;\r\n    let [message, setMessage] = useState([\"\"])\r\n\r\n    const chatWindow = {\r\n        width: '85%',\r\n        height: '80vh',\r\n        margin: '0 auto',\r\n        background: '#dcdddd'\r\n    }\r\n\r\n    let query = (new URL(document.location)).searchParams;\r\n    let username = query.get(\"user\");\r\n    let occupation = query.get(\"job\");\r\n    let room = query.get(\"room\");\r\n    socket = io(ENDPOINT);\r\n    useEffect(() => {\r\n        socket.on('messageshaha', message => {\r\n            console.log(message);\r\n        })\r\n\r\n        socket.emit('join', { username, occupation, room }, (e) => {\r\n            console.log(\"e\", e)\r\n        })\r\n\r\n        socket.on('userJoin', msg => {\r\n            setMessage([...msg, msg]);\r\n        })\r\n\r\n        return () => {\r\n            socket.emit('disconnect');\r\n            socket.off();\r\n        }\r\n    }, [ENDPOINT, username, occupation, room]);\r\n\r\n    useEffect(() => {\r\n        socket.on('message', msg => {\r\n            console.log(msg);\r\n            setMessage([...msg, msg]);\r\n        })\r\n    }, [message])\r\n\r\n\r\n    // async function Test() {\r\n    //     let response = await axios.post(ENDPOINT + '/testing', {\r\n    //         firstName: 'Fred',\r\n    //         lastName: 'Flintstone'\r\n    //     })\r\n\r\n    //     console.log(\"response data\", response.data);\r\n    // }\r\n\r\n    // useEffect(() => {\r\n    //     Test()\r\n    // }, []);\r\n\r\n    function sendMessage() {\r\n        const msg = chatValue.current.value;\r\n        let room = query.get(\"room\");\r\n        socket.emit('sendMessage', ({ msg, room }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>CHATTT</h1>\r\n            <p style={chatWindow}>{message}</p>\r\n            <input type=\"text\" ref={chatValue} />\r\n            <button onClick={sendMessage} ref={sendChatBtn}>Enter</button>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\MainPage\\Main.js",["82","83"],"import { React, useState, useRef, useEffect, useReducer } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Google from './Google'\r\nimport './Main.css'\r\nimport Bubble from './Bubble'\r\nimport image from './logo.jpg'\r\nimport axios from 'axios'\r\nimport { setCookie, getCookie } from '../Cookie/Cookie'\r\n\r\nexport default function Main() {\r\n    const history = useHistory()\r\n    const URL = 'http://localhost:5000/';\r\n    const ERR = {\r\n        REGISTER: 'cPassword',\r\n        EMAIL: 'email',\r\n        PASSWORD: 'password'\r\n    }\r\n\r\n    const InitialState = {\r\n        email: \"\",\r\n        password: \"\",\r\n        cPassword: \"\"\r\n    }\r\n\r\n    const [state, dispatch] = useReducer(reducer, InitialState);\r\n    const email = useRef();\r\n    const password = useRef();\r\n    const cPassword = useRef();\r\n    const successMsg = useRef();\r\n\r\n    let [signIn, setSignIn] = useState(true)\r\n    let [signUp, setSignUp] = useState(false)\r\n    let [success, setSuccess] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        ResetInputAndMsg()\r\n        dispatch({ type: 'RESET' })\r\n    }, [signUp])\r\n\r\n    useEffect(() => {\r\n        const verifyToken = getCookie(\"token\");\r\n\r\n        if (verifyToken !== \"\") {\r\n            proceedToChat()\r\n        }\r\n    }, [])\r\n\r\n    function proceedToChat() {\r\n        history.push({\r\n            pathname: '/chat'\r\n        })\r\n    }\r\n\r\n    function reducer(state, action) {\r\n        switch (action.type) {\r\n            case ERR.REGISTER:\r\n                return { ...state, cPassword: action.payload }\r\n            case ERR.EMAIL:\r\n                return { ...state, email: action.payload }\r\n            case ERR.PASSWORD:\r\n                return { ...state, password: action.payload }\r\n            case 'RESET':\r\n                return InitialState\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\n    function ResetInputAndMsg() {\r\n        email.current.value = \"\"\r\n        password.current.value = \"\"\r\n        password.current.classList.remove('err');\r\n    }\r\n\r\n    function swapTab(e) {\r\n        if (e === 'signIn') {\r\n            setSignIn(true);\r\n            setSignUp(false);\r\n        } else if (e === 'signUp') {\r\n            setSignIn(false);\r\n            setSignUp(true);\r\n        }\r\n    }\r\n\r\n    function resetClass(e) {\r\n        e.target.classList.remove('err');\r\n        dispatch({ type: 'RESET' })\r\n    }\r\n\r\n    async function Login() {\r\n        console.log(\"login\")\r\n        try {\r\n            if (password.current.value === \"\") {\r\n                password.current.classList.add('err');\r\n                dispatch({ type: ERR.PASSWORD, payload: 'Please Fill in your Password' });\r\n                return\r\n            }\r\n\r\n            if (email.current.value === \"\") {\r\n                email.current.classList.add('err');\r\n                dispatch({ type: ERR.EMAIL, payload: 'Please Fill in your Email' });\r\n                return\r\n            }\r\n\r\n            let user = {}\r\n            user.email = email.current.value;\r\n            user.password = password.current.value;\r\n\r\n            const response = await axios.post(URL + \"auth/login\", user);\r\n            console.log(\"response\", response)\r\n            const token = response.data.token;\r\n\r\n            setCookie(\"token\", token, 0.8);\r\n\r\n            proceedToChat()\r\n\r\n        } catch (error) {\r\n            console.log(error.response);\r\n            const errorResult = error.response.data\r\n            password.current.classList.add('err');\r\n            errorResult.error.forEach(result => {\r\n                dispatch({ type: result.param, payload: result.msg })\r\n            });\r\n        }\r\n    }\r\n\r\n    async function Register() {\r\n        try {\r\n            if (password.current.value !== cPassword.current.value) {\r\n                password.current.classList.add('err');\r\n                cPassword.current.classList.add('err');\r\n                dispatch({ type: ERR.REGISTER, payload: 'Please make sure the password is matched' })\r\n                return\r\n            }\r\n\r\n            if (email.current.value === \"\") {\r\n                email.current.classList.add('err');\r\n                dispatch({ type: ERR.EMAIL, payload: 'Please Fill in your Email' })\r\n                return\r\n            }\r\n\r\n            let user = {}\r\n            user.email = email.current.value;\r\n            user.password = cPassword.current.value;\r\n            const response = await axios.post(URL + \"auth/register\", user);\r\n\r\n            if (response.status === 200) {\r\n                ResetInputAndMsg();\r\n                cPassword.current.value = \"\"\r\n                setSuccess(response.data.status);\r\n                successMsg.current.classList.add('active');\r\n                cPassword.current.classList.remove('err');\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error.response);\r\n            const errorResult = error.response.data\r\n            cPassword.current.classList.add('err');\r\n            errorResult.error.forEach(result => {\r\n                dispatch({ type: result.param, payload: result.msg })\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"form-container\">\r\n                <Bubble size=\"20\" top=\"-15\" left=\"150\" />\r\n                <Bubble size=\"40\" top=\"-65\" left=\"110\" />\r\n                <div className=\"bubble-container\">\r\n                    {Array(5).fill(5).map((size, index) => (\r\n                        <Bubble size={size} top=\"0\" left=\"0\" key={index} />\r\n                    ))}\r\n                </div>\r\n                <h1>CONNECT YOU & ME</h1>\r\n                <div className=\"flex align-top hori-between\">\r\n                    <div className=\"logo-container\">\r\n                        <img src={image} alt=\"logo image\" />\r\n                    </div>\r\n                    <div className=\"sign-up-in-form\">\r\n                        <div className=\"flex hori-center\">\r\n                            <h2 className={signIn ? \"active\" : \"\"} onClick={() => swapTab('signIn')}>SIGN IN</h2>\r\n                            <h2 className={signUp ? \"active\" : \"\"} onClick={() => swapTab('signUp')}>SIGN UP</h2>\r\n                        </div>\r\n                        <div className=\"action-container\">\r\n                            <div className=\"object\">\r\n                                <h3>Email:</h3>\r\n                                <input type=\"text\" ref={email} onKeyDown={resetClass} />\r\n                                <p className=\"err-message\">{state.email}</p>\r\n                            </div>\r\n                            <div className=\"object\">\r\n                                <h3>Password:</h3>\r\n                                <input type=\"password\" ref={password} onKeyDown={resetClass} />\r\n                                <p className=\"err-message\">{state.password}</p>\r\n                            </div>\r\n                            {\r\n                                signUp ?\r\n                                    <>\r\n                                        <div className=\"object\">\r\n                                            <h3>Confirm Password:</h3>\r\n                                            <input type=\"password\" ref={cPassword} onKeyDown={resetClass} />\r\n                                            <p className=\"err-message\">{state.cPassword}</p>\r\n                                            <p ref={successMsg} className=\"success-message\">{success}</p>\r\n                                        </div>\r\n                                        <div className=\"sign-btn-container\">\r\n                                            <button onClick={Register} className=\"sign-btn\">Sign Up</button>\r\n                                        </div>\r\n                                    </>\r\n                                    :\r\n                                    <div className=\"sign-btn-container\">\r\n                                        <button onClick={Login} className=\"sign-btn\" >Sign In</button>\r\n                                    </div>\r\n                            }\r\n                            <Google label={`${signIn ? \"Sign In\" : \"Sign Up\"} with Google`} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\MainPage\\Google.js",[],"C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\MainPage\\Bubble.js",[],"C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\Cookie\\Cookie.js",["84"],"\r\nexport function setCookie(cName, cValue, days) {\r\n    var d = new Date();\r\n    d.setTime(d.getTime() + (days * 24 * 60 * 60 * 1000));\r\n    document.cookie = cName + \"=\" + cValue + \";\" + \"expires=\" + d.toUTCString() + \";path/\"\r\n}\r\n\r\nexport function getCookie(cName) {\r\n    var name = cName + \"=\";\r\n    var allCookie = document.cookie.split(';');\r\n    for (var i = 0; i < allCookie.length; i++) {\r\n        var currCookie = allCookie[i];\r\n        //So we need to check if the first character of the current index is empty, we need to extract out the space as we only concern for the cookie\r\n        while (currCookie.charAt(0) === ' ') {\r\n            currCookie = currCookie.substring(1);\r\n        }\r\n        if (currCookie.indexOf(name) === 0) {\r\n            return currCookie.substring(name.length, currCookie.length);\r\n        }\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function deleteCookie(cName) {\r\n    document.cookie = cName + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\r\n}\r\n\r\n\r\n\r\n","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\ChatPage\\Chat.js",["85","86","87","88","89"],"C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\Friends\\FriendList.js",["90","91","92"],"C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\ChatWindow\\ChatWindow.js",[],"C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\ChatWindow\\Message.js",["93","94","95","96"],"import { React, useEffect, useRef, useState } from 'react'\r\nimport io from 'socket.io-client';\r\n\r\nexport default function Message() {\r\n    return (\r\n        <div className=\"chat-msg-container\">\r\n            <div className=\"chat-msg\">\r\n                <input type=\"text\" />\r\n                <button>Enter</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\Friends\\User.js",["97","98"],"C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\ChatWindow\\Header.js",["99"],"C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\ChatWindow\\Content.js",[],"C:\\Users\\User\\Desktop\\Chat App\\client\\src\\context\\UserContext.js",[],"C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\Friends\\Dummy.js",[],["100","101"],"C:\\Users\\User\\Desktop\\Chat App\\client\\src\\components\\Friends\\Modal.js",["102"],"import React, { useRef, useContext } from 'react'\r\nimport chat from './chat.svg'\r\nimport axios from 'axios'\r\nimport { UserContext } from '../../context/UserContext'\r\n\r\nexport default function Modal({ show, setShow, friendslist, dispatch }) {\r\n    const URL = 'http://localhost:5000/';\r\n    const closeModal = useRef();\r\n    const modal = useRef();\r\n    const searchFriend = useRef();\r\n    const { user, setUser } = useContext(UserContext)\r\n\r\n    async function addFriend() {\r\n        try {\r\n            console.log(\"add friedn\")\r\n            let jsonFriend = {}\r\n            jsonFriend.searchParam = searchFriend.current.value;\r\n\r\n            const response = await axios.post(URL + \"social/request\", jsonFriend, {\r\n                headers: {\r\n                    \"Authorization\": \"Bearer \" + user.token\r\n                }\r\n            })\r\n            console.log(\"response\", response)\r\n        } catch (error) {\r\n            console.error(error.message)\r\n        }\r\n    }\r\n\r\n    async function startChat(friend) {\r\n        try {\r\n            console.log(\"friend\", friend)\r\n            dispatch({ type: 'CREATE', payload: friend })\r\n        } catch (error) {\r\n            console.error(error.message)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div ref={modal} className=\"modal\" style={show ? { display: 'block' } : { display: 'none' }}>\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <span className=\"close\" ref={closeModal} onClick={() => setShow(false)}>&times;</span>\r\n                        <h2>Friends List</h2>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <div>\r\n                            <input type=\"text\" ref={searchFriend} />\r\n                            <button onClick={() => addFriend()}>Add</button>\r\n                        </div>\r\n                        {friendslist !== null ?\r\n                            friendslist.map((friend, ind) => (\r\n                                <div className=\"contact-list\" key={ind}>\r\n                                    <div className=\"photo\">\r\n                                        <img src={friend.picture} alt=\"contact profile pic\" />\r\n                                    </div>\r\n                                    <div className=\"info\">\r\n                                        {friend.name === null || friend.name === \"\" ?\r\n                                            null\r\n                                            :\r\n                                            <>\r\n                                                <p>{friend.email}</p>\r\n                                                <p>{friend.bio}</p>\r\n                                            </>\r\n\r\n                                        }\r\n                                    </div>\r\n                                    <div className=\"action\" onClick={() => startChat(friend)}>\r\n                                        <img src={chat} alt=\"let's chat\" />\r\n                                    </div>\r\n                                </div>\r\n\r\n                            ))\r\n                            : null\r\n                        }\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <h3>Modal Footer</h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n",{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":3,"column":8,"nodeType":"109","messageId":"110","endLine":3,"endColumn":13},{"ruleId":"111","severity":1,"message":"112","line":41,"column":8,"nodeType":"113","endLine":41,"endColumn":46,"suggestions":"114"},{"ruleId":"111","severity":1,"message":"112","line":48,"column":8,"nodeType":"113","endLine":48,"endColumn":17,"suggestions":"115"},{"ruleId":"111","severity":1,"message":"116","line":46,"column":8,"nodeType":"113","endLine":46,"endColumn":10,"suggestions":"117"},{"ruleId":"118","severity":1,"message":"119","line":179,"column":25,"nodeType":"120","endLine":179,"endColumn":61},{"ruleId":"121","severity":1,"message":"122","line":5,"column":50,"nodeType":"123","messageId":"124","endLine":5,"endColumn":51},{"ruleId":"107","severity":1,"message":"125","line":19,"column":11,"nodeType":"109","messageId":"110","endLine":19,"endColumn":19},{"ruleId":"111","severity":1,"message":"126","line":49,"column":8,"nodeType":"113","endLine":49,"endColumn":10,"suggestions":"127"},{"ruleId":"111","severity":1,"message":"128","line":51,"column":15,"nodeType":"129","endLine":73,"endColumn":6},{"ruleId":"111","severity":1,"message":"130","line":73,"column":8,"nodeType":"113","endLine":73,"endColumn":16,"suggestions":"131"},{"ruleId":"111","severity":1,"message":"112","line":89,"column":8,"nodeType":"113","endLine":89,"endColumn":14,"suggestions":"132"},{"ruleId":"107","severity":1,"message":"133","line":1,"column":51,"nodeType":"109","messageId":"110","endLine":1,"endColumn":60},{"ruleId":"107","severity":1,"message":"134","line":13,"column":19,"nodeType":"109","messageId":"110","endLine":13,"endColumn":26},{"ruleId":"135","severity":1,"message":"136","line":31,"column":13,"nodeType":"137","messageId":"138","endLine":32,"endColumn":32},{"ruleId":"107","severity":1,"message":"133","line":1,"column":17,"nodeType":"109","messageId":"110","endLine":1,"endColumn":26},{"ruleId":"107","severity":1,"message":"139","line":1,"column":28,"nodeType":"109","messageId":"110","endLine":1,"endColumn":34},{"ruleId":"107","severity":1,"message":"140","line":1,"column":36,"nodeType":"109","messageId":"110","endLine":1,"endColumn":44},{"ruleId":"107","severity":1,"message":"141","line":2,"column":8,"nodeType":"109","messageId":"110","endLine":2,"endColumn":10},{"ruleId":"107","severity":1,"message":"134","line":6,"column":19,"nodeType":"109","messageId":"110","endLine":6,"endColumn":26},{"ruleId":"107","severity":1,"message":"142","line":7,"column":13,"nodeType":"109","messageId":"110","endLine":7,"endColumn":19},{"ruleId":"107","severity":1,"message":"143","line":4,"column":21,"nodeType":"109","messageId":"110","endLine":4,"endColumn":30},{"ruleId":"103","replacedBy":"144"},{"ruleId":"105","replacedBy":"145"},{"ruleId":"107","severity":1,"message":"134","line":11,"column":19,"nodeType":"109","messageId":"110","endLine":11,"endColumn":26},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.","ArrayExpression",["148"],["149"],"React Hook useEffect has a missing dependency: 'proceedToChat'. Either include it or remove the dependency array.",["150"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'location' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUserInfo'. Either include it or remove the dependency array.",["151"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'socket' and 'user._id'. Either include them or remove the dependency array.",["152"],["153"],"'useEffect' is defined but never used.","'setUser' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","'useRef' is defined but never used.","'useState' is defined but never used.","'io' is defined but never used.","'active' is assigned a value but never used.","'setActive' is assigned a value but never used.",["146"],["147"],"no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},"Update the dependencies array to be: [ENDPOINT, username, occupation, room, socket]",{"range":"166","text":"167"},"Update the dependencies array to be: [message, socket]",{"range":"168","text":"169"},"Update the dependencies array to be: [proceedToChat]",{"range":"170","text":"171"},"Update the dependencies array to be: [getUserInfo]",{"range":"172","text":"173"},"Update the dependencies array to be: [active, socket, user._id]",{"range":"174","text":"175"},"Update the dependencies array to be: [chat, socket]",{"range":"176","text":"177"},[1131,1169],"[ENDPOINT, username, occupation, room, socket]",[1327,1336],"[message, socket]",[1250,1252],"[proceedToChat]",[1414,1416],"[getUserInfo]",[1992,2000],"[active, socket, user._id]",[2290,2296],"[chat, socket]"]